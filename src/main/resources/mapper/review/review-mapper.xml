<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="review">
<!-- 이 파일 자체를 사용하지 마시구 복사해서 사용해주세요 -->
    <select id="findAll" resultMap="reviewVoMap">
        select
            r.*,
            c.id camp_id2,
            c.camp_name camp_name
        from
            review r left join camp c
                on r.camp_id = c.id
        order by
            r.reg_date desc
    </select>
    <select id="_findAll" resultType="_reviewVo">
        select
            r.*
        from
            review r
        order by
            r.reg_date desc
    </select>
    <resultMap id="reviewVoMap" type="reviewVo">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="review_tag" property="reviewTag"/>
        <result column="review_title" property="reviewTitle"/>
        <result column="review_content" property="reviewContent"/>
        <result column="view_count" property="viewCount"/>
        <result column="like_count" property="likeCount"/>
        <result column="reg_date" property="regDate"/>
        <result column="renamed_name" property="renamedName"/>
        <association property="camp" javaType="camp">
            <id column="camp_id2" property="id"/>
            <result column="camp_name" property="campName"/>
        </association>
    </resultMap>
    <select id="findById" resultMap="reviewVoMap">
        select
            r.*,
            c.id camp_id2,
            c.camp_name camp_name
        from
            review r left join camp c
                on r.camp_id = c.id
        where
            r.id = #{id}
    </select>

    <select id="findByIdWithAttach" resultMap="reviewAttachVoMap">
        select
            r.*,
            c.camp_name camp_name,
            a.id attach_id,
            a.renamed_name renamed_name,
            rc.id comment_id,
            rc.user_id comment_user_id,
            rc.content comment_content,
            rc.reg_date comment_reg_date
        from
            attachment a
                join board_attach ba
                    on a.id = ba.attach_id
                right join review r
                    on ba.board_id = r.id
                left join camp c
                    on r.camp_id = c.id
                left join review_comment rc
                    on r.id = rc.review_id
        where
            r.board_attr = 2
            and
            r.id = #{id}
    </select>
    <resultMap id="reviewAttachVoMap" type="reviewVo">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="camp_id" property="campId"/>
        <result column="board_attr" property="boardAttr"/>
        <result column="review_tag" property="reviewTag"/>
        <result column="review_title" property="reviewTitle"/>
        <result column="review_content" property="reviewContent"/>
        <result column="view_count" property="viewCount"/>
        <result column="like_count" property="likeCount"/>
        <result column="reg_date" property="regDate"/>
        <result column="camp_name" property="campName"/>

        <collection property="attachments" ofType="attachmentVo">
            <id column="attach_id" property="id"/>
            <result column="renamed_name" property="renamedName"/>
        </collection>
        <collection property="reviewComments" ofType="reviewComment">
            <id column="comment_id" property="id"/>
            <result column="comment_user_id" property="userId"/>
            <result column="comment_content" property="content"/>
            <result column="comment_reg_date" property="regDate"/>
        </collection>
    </resultMap>


    <insert id="insertReview">
        insert into
            review
        values(
            seq_review_id.nextval,
            #{userId},
            #{campId},
            #{boardAttr},
            #{reviewTag},
            #{reviewTitle},
            #{reviewContent},
            default,
            default,
            default
        )
    <selectKey order="AFTER" resultType="_long" keyProperty="id">
        select
            seq_review_id.currval
        from
            dual
    </selectKey>
    </insert>
    <update id="updateReview">
        update
            review
        set
            review_tag = #{reviewTag},
            review_title = #{reviewTitle},
            review_content = #{reviewContent}
        where
            id = #{id}
    </update>
    <delete id="deleteReview">
        delete from
            review
        where
            id = #{id}
    </delete>
    <select id="getTotalCount" resultType="_int">
        select
            count(*)
        from
            review
    </select>
    <update id="updateReviewReadCount">
        update
            review
        set
            view_count = view_count + 1
        where
            id = #{id}
    </update>
    <select id="findVoByReviewId" resultType="reviewVo">
        select
            *
        from
            review
        where
            id = #{id}
    </select>
    <insert id="insertAttachment">
        insert into
            attachment
        values(
            seq_attachment_id.nextval, #{originalName}, #{renamedName}
        )
        <selectKey order="AFTER" resultType="_long" keyProperty="id">
            select
                seq_attachment_id.currval
            from
                dual
        </selectKey>
    </insert>
    <insert id="insertBoardAttach">
        insert into
            board_attach
        values(
            seq_board_attach_id.nextval, #{attachId}, #{boardId}, #{boardAttr}
        )
    </insert>
    <select id="getTotalUserReview" resultType="_int">
        select
            count(*)
        from
            review
        where
            user_id = #{userId}
    </select>
    <select id="findByUserId" resultType="reviewVo">
        select
            r.*,
            (select camp_name from camp where id = r.camp_id) camp_name
        from
            review r
        where
            user_id = #{userId}
    </select>
    <select id="getTotalReview" resultType="reviewVo">
        select
            count(*)
        from
            review
    </select>
    <delete id="deleteReviewAttach">
        delete from
            attachment
        where
            id = #{attachId}
    </delete>
    <delete id="deleteReviewAttachBridge">
        delete from
            board_attach
        where
            attach_id = #{attachId}
            and
            board_id = #{reviewId}
            and
            board_attr = 2
    </delete>
    <insert id="insertComment">
        insert into
            review_comment
        values(
            seq_review_comment_id.nextval,
            #{userId},
            #{reviewId},
            #{content},
            #{regDate}
        )
    </insert>
    <delete id="deleteComment">
        delete from
            review_comment
        where
            id = #{id}
    </delete>

    <select id="findPhotoReview" resultMap="reviewVoMap">
        select
            r.*,
            c.id camp_id,
            c.camp_name camp_name,
            img.renamed_name renamed_name
        from
            review r
                left join camp c
                on r.camp_id = c.id
                full join (SELECT
                r.id review_id,
                (select renamed_name from attachment where ba.attach_id = id) renamed_name
            FROM
                review r
                JOIN (
                SELECT
                board_id,
                attach_id,
                RANK() OVER (PARTITION BY board_id ORDER BY attach_id) AS rnk
                FROM
                board_attach ba right join review r
                on ba.board_id = r.id
                ) ba ON r.id = ba.board_id
                WHERE
                ba.rnk &lt;= 1) img
            on r.id = img.review_id
        order by
        r.reg_date desc
    </select>
    <insert id="insertPoint">
        insert into
            point
        values
            (
            seq_point_id.nextval,
            #{userId},
            #{point},
            #{pointLog},
            #{regDate}
            )
    </insert>
    <select id="getTotalCampReview" resultType="_int">
        select
            count(*)
        from
            review
    </select>
    <select id="findByCampId" resultType="reviewVo">
        select
            r.*,
            (select camp_name from camp where id = r.camp_id) camp_name
        from
            review r
        where
            user_id = #{userId}
    </select>


</mapper>